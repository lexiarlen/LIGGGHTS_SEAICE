# Material Properties 
variable bond_damp_type          equal 1          # [-] Use Yu Guo Damping
variable bond_damp_val           equal 0        # [-] don't use bond damping
variable rho_i_2d                equal 920.0      # [kg/m3] ice density
variable elastic_modulus         equal 7.5e7       # [Pa]
variable poissons_ratio          equal 0.3        # [-]
variable normal_strength         equal 1e4       # [Pa] bond critical normal strength
variable shear_strength          equal 50e4      # [Pa] bond critical shear strength 
variable coeff_rest_pp           equal 0.15       # [-] particle particlez
variable coeff_rest_pw           equal 0.15        # [-] particle wall
variable mu                      equal 0.6        # [-] particle particle friction
variable wall_friction           equal 0.6        # [-] wall wall friction   
variable mean_diameter           equal 1750

# Forcing Parameters
variable rho_o                   equal 1027       # [kg/m3] seawater density
variable rho_a                   equal 1          # [kg/m3] atmosphere density
variable drag_o                  equal 0.0055      # [-] ocean drag coefficient
variable drag_a                  equal 0.0015      # [-] atmos drag coefficient
variable max_wind_speed          equal 22         # [m/s]

# Derived Properties & Parameters
variable shear_modulus           equal ${elastic_modulus}/(2.0*(1.0+${poissons_ratio})) # assume isotropy
variable r_o                     equal 1 #4/(PI*${mean_diameter})  
#variable rho_i                   atom  3*${rho_i_2d}/(4*r)  # makes wayyy too light of ice floes

# Numerics & output
variable dt                      equal 0.02                     
variable run_time                equal 24*3600                        # [s] runtime
variable num_timesteps           equal floor(${run_time}/${dt})
variable num_dumps               equal 200   
variable dump_freq               equal floor(${num_timesteps}/${num_dumps})
variable ts_check_freq           equal 6000
variable post_dir                string "post"

### ----------------------------------- build simulation ----------------------------------- ###

# Preliminaries
units si                                                             
atom_style hybrid granular bond/gran n_bondtypes 1 bonds_per_atom 6    
atom_modify map array sort 0 0                                            
newton off                                                              
hard_particles yes
processors 1 3 1                        

# Domain
read_restart restarts/2kmfloes3d.restart

# Neighbors
communicate single vel yes              # ghost particles are given position and velocity information
neighbor 1000 bin                        # skin distance to specify bin size for neighbor list generation
neigh_modify delay 0                    # don't delay the generation of neighbor lists   

# Bond style
bond_style gran                                        # linear parallel bond

# Contact style
pair_style gran model hertz tangential history limitForce on                      # Hertz-Mindlin
pair_coeff * *                                                           # contact coeffs from material props not force field

# Contact law
fix m1 all property/global youngsModulus peratomtype ${elastic_modulus} ${elastic_modulus} # set the elastic modulus
fix m2 all property/global poissonsRatio peratomtype ${poissons_ratio} ${poissons_ratio}  # set Poisson's ratio
fix m3 all property/global coefficientRestitution peratomtypepair 2 ${coeff_rest_pp} ${coeff_rest_pw} ${coeff_rest_pw} ${coeff_rest_pw} 
fix m4 all property/global coefficientFriction peratomtypepair 2 ${mu} ${wall_friction} ${wall_friction} ${wall_friction}     # set friction coefficient to atom type 1

# Set bond coefficients for a simple bond (no holes) with properties below; see Notion for more details 
bond_coeff 1 ${r_o} 0 ${elastic_modulus} ${shear_modulus} ${bond_damp_type} ${bond_damp_val} 1 ${normal_strength} ${shear_strength}

# Timestep & insertion
timestep ${dt}
reset_timestep 0
run 1

# Reset density
#set type 1 density v_rho_i

# Group particles
group walls type 2
group active type 1

# Set Integrator
fix int active nve/sphere

# Forcing stuff 
# variable ocean_forcing_coeff_3d     atom 2*${rho_o}*${drag_o}*PI*r^2*v_rho_i/${rho_o}
# variable atmos_forcing_coeff_3d     atom 2*${rho_a}*${drag_a}*PI*r^2*(${rho_o}-v_rho_i)/${rho_o}
variable current_step               equal step
variable current_time               equal v_current_step*${dt} 
variable wind_speed_increment       equal ${max_wind_speed}/${run_time}
variable dynamic_wind_speed         equal v_current_time*${wind_speed_increment}
variable ocean_skin_coeff           atom ${rho_o}*${drag_o}*PI*r^2
variable atmos_skin_coeff           atom ${rho_a}*${drag_a}*PI*r^2

variable u_atmos_x               equal 0.0                                                        
variable u_atmos_y               atom v_dynamic_wind_speed*-1   # should increase from 0 to 22 over 24 hrs; just start 22 for now.
#variable u_atmos_y               atom ${max_wind_speed}*-1   # should increase from 0 to 22 over 24 hrs; just start 22 for now.
variable u_ocean_x               equal 0.0
variable u_ocean_y               equal 0

variable Fdrag_atmos_x           atom v_atmos_skin_coeff*sqrt(${u_atmos_x}^2+v_u_atmos_y^2)*${u_atmos_x}
variable Fdrag_atmos_y           atom v_atmos_skin_coeff*sqrt(${u_atmos_x}^2+v_u_atmos_y^2)*v_u_atmos_y
variable Fdrag_ocean_x           atom v_ocean_skin_coeff*sqrt((${u_ocean_x}-vx)^2+(${u_ocean_y}-vy)^2)*(${u_ocean_x}-vx)
variable Fdrag_ocean_y           atom v_ocean_skin_coeff*sqrt((${u_ocean_x}-vx)^2+(${u_ocean_y}-vy)^2)*(${u_ocean_y}-vy)

variable Fmag                   atom sqrt((v_Fdrag_atmos_x+v_Fdrag_ocean_x)^2+(v_Fdrag_atmos_y+v_Fdrag_ocean_y)^2)
variable Fstar                  atom ${normal_strength}*${mean_diameter}^2/(250e3*v_Fmag)

variable dragx                   atom (v_Fdrag_atmos_x+v_Fdrag_ocean_x)*v_Fstar
variable dragy                   atom v_Fdrag_atmos_y+v_Fdrag_ocean_y*v_Fstar

fix apply_winds all addforce v_dragx v_dragy 0 

# Compute bonds
compute bc all property/local batom1 batom2 bbondbroken 

# Thermo setup
thermo 100000                                             # set output frequency for output for screen
thermo_style custom step numbonds atoms time dt cpu ke                 # custom pringting to screen
thermo_modify lost warn norm no                       # ignore lost atoms and do not normalize output

# Dump setup
dump dmp all custom ${dump_freq} ${post_dir}/dump*.liggghts id x y z radius vx vy vz fx fy fz
# do i need vel data; maybe nice for debugging but what to do with it?, mean vel through the fjord would be helpful, so can get area flux
# dans 2017 plots vels along fjord center line at dif crucial timesteps
# west & dans plot principal stresses. this will be expensive to compute because bond and atom stresses
dump_modify dmp pad 10 sort id first yes   

dump bondforcechain all local ${dump_freq} ${post_dir}/bfc*.bond c_bc[1] c_bc[2] c_bc[3] 
dump_modify bondforcechain pad 10 label 'BONDS' first yes

# Timestep checking
fix dtBond all check/timestep/bond ${ts_check_freq} 0.3                       # check the time step for the bond
fix ts_check all check/timestep/gran ${ts_check_freq} 0.3 0.3

run ${num_timesteps} # replace with  run X every Y "set atom * property/atom heatSource v_H" maybe
write_restart restarts/flow24_3d_stiff_packing.restart


# TODO: need to figure out what data i want. definitely bond data and velocity; also force? review west
# I'll use coord numbers to keep track of fractures
# I also need to figure out how to apply time varying forcing. could always do something really weird 
# with velocity of something to get time

# I should also probably run with restarts. say run "3 hours" and restart in case it crashes for the long runs
# wit hdt = 0.01, 3 hrs = 1.08 * 10^6 timesteps; therefore 72 hour simulation = 26(ish) million timesteps
# thats actually not crazy i regularly run 10 million. maybe just restart every 24 hrs to be safe. 

# After getting workflow, need to repeat with smaller particles.