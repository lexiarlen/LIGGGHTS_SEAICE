# Material Properties
variable diameter                equal 1.0        # [m] particles diameter 
variable bond_damp_type          equal 1          # [-] Use Yu Guo Damping
variable bond_damp_val           equal 0.00       # [-] astrom uses 10^-3 for damping; might need to run an ensemble varying this if i cant break
variable rho_i                   equal 910.0      # [kg/m3] 3D ice density
variable rho_o                   equal 1027       # [kg/m3] 3D ocean density
variable elastic_modulus         equal 5.0e9      # [Pa]
variable poissons_ratio          equal 0.3        # [-]
variable normal_strength         equal 1.0e5      # [Pa] bond critical normal strength
variable shear_strength          equal 1.0e6      # [Pa] bond critical shear strength ; astrom only has normal failure
variable coeff_rest_pp           equal 0.3        # [-] particle particle
variable friction_pp             equal 0.7        # [-] particle particle
variable coeff_rest_pw           equal 0.3        # [-] particle wall
variable friction_pw             equal 0.0        # [-] particle wall
variable coeff_rest_ww           equal 0.3        # [-] wall wall
variable friction_ww             equal 0.0        # [-] wall wall


# Domain
variable max_l                   equal 120
variable min_l                   equal -20

variable max_floe                equal 49.6
variable min_floe                equal 0

# Forcing Parameters 
variable f                       atom "0.3"
variable L                       equal ${max_floe}-${min_floe}
variable L_astrom                atom "1000"
variable radius                  equal ${diameter}/2  

# Derived Properties
variable shear_modulus           equal ${elastic_modulus}/(2.0*(1.0+${poissons_ratio})) # assume isotropy
variable lattice_spacing         equal ${diameter}
variable bond_skin               equal (1.001)*${lattice_spacing} # make sure all possible bonds are installed

# Numerics & output
variable dt                      equal 5e-5                # really low to resolve high elastic modulus
variable run_time                equal 5                   # [s] runtime
variable num_timesteps           equal ${run_time}/${dt}   # 600,000 in this case
variable dump_freq               equal 4000

### ----------------------------------- build simulation ----------------------------------- ###


# Preliminaries
units si                                                                # SI units
atom_style hybrid granular bond/gran n_bondtypes 1 bonds_per_atom 6     # specify particle and bond style
atom_modify map array sort 0 0                                              
newton off                                                              # don't use Newton's 3rd law
boundary f f f
hard_particles yes

processors * * *                                                        # ligghts allocates processors for x,y,z '*'

read_data rcp.data

communicate single vel yes              # ghost particles are given position and velocity information
neighbor 0.1 bin                        # skin distance to specify bin size for neighbor list generation
neigh_modify delay 0                    # don't delay the generation of neighbor lists   

# Bond style
bond_style gran                                                          # linear parallel bond

# Contact style
pair_style gran model hertz tangential history                           # Hertz-Mindlin
pair_coeff * *                                                           # contact coeffs from material props not force field

# Contact law
fix m1 all property/global youngsModulus peratomtype ${elastic_modulus} ${elastic_modulus} # set the elastic modulus
fix m2 all property/global poissonsRatio peratomtype ${poissons_ratio} ${poissons_ratio}  # set Poisson's ratio
fix m3 all property/global coefficientRestitution peratomtypepair 2 ${coeff_rest_pp} ${coeff_rest_pw} ${coeff_rest_pw} ${coeff_rest_ww} 
fix m4 all property/global coefficientFriction peratomtypepair 2 ${friction_pp} ${friction_pw} ${friction_pw} ${friction_ww}     # set friction coefficient to atom type 1

# Set bond coefficients for a simple bond (no holes) with properties below; see Notion for more details 
bond_coeff 1 1 0 ${elastic_modulus} ${shear_modulus} ${bond_damp_type} ${bond_damp_val} 1 ${normal_strength} ${shear_strength}

# Delete extra atoms
group all_atoms type 1 
variable n_atoms equal count(all_atoms)-7
delete_bonds all atom 1 remove
group atoms_2_delete id > ${n_atoms}
delete_atoms group atoms_2_delete

# Inset mesh
fix mesh_top all mesh/surface/stress file meshes/compressor.stl type 2  move -20.0 49.5 -2.5 
fix mesh_bot all mesh/surface/stress file meshes/compressor.stl type 2  move -20.0 -1.5 -2.5

# Timestep & insertion
timestep ${dt}                                                         
run 0

### ----------------------------------- bond grains ---------------------------------- ###
 
compute bc all property/local batom1 batom2 bbondbroken bforceX bforceY bforceZ  

fix bondcr all bond/create/gran 1 1 1 ${bond_skin} 1 6         # nevery itype jtype bondskin btype newperts

fix dtBond all check/timestep/bond 1 0.3                       # check the time step for the bond

run 1                                                          # bond grains

unfix dtBond                                                   # stop checking bond timestep (not doing anymore bonding)

fix_modify bondcr every 0                                      # do not create new bonds after this line

### ----------------------------------- apply forces ---------------------------------- ###

variable initial_bonds      equal v_numbonds
variable bonds_thresh       equal floor(${initial_bonds}*0.5)

fix integrate all nve/sphere         # set the integrator such that moles, velocity, and energy are conserved 
compute stress all stress/atom pair

# make mesh exist to balls
fix meshwalls all wall/gran model hertz tangential history mesh n_meshes 2 meshes mesh_top mesh_bot
# move meshes
fix move_bot_mesh all move/mesh mesh mesh_bot linear 0.0 0.05 0.0
fix move_top_mesh all move/mesh mesh mesh_top linear 0.0 -0.05 0.0

### ----------------------------------- run & output ---------------------------------- ###

dump dmp all custom ${dump_freq} post/dump*.liggghts id mass x y z vx vy vz fx fy fz radius c_stress[1] c_stress[2] c_stress[3] c_stress[4] c_stress[5] c_stress[6]
dump_modify dmp pad 10 sort id first yes                             # pad the timesteps with zeros

thermo 10000                                             # set output frequency for output for screen
thermo_style custom step numbonds atoms time dt                 # custom pringting to screen
thermo_modify lost warn norm no                       # ignore lost atoms and do not normalize output

# configure the bond damping
dump bondforcechain all local ${dump_freq} post/bfc*.bond &
    c_bc[1] c_bc[2] c_bc[3] c_bc[4] c_bc[5] c_bc[6]  
dump_modify bondforcechain pad 10 label 'BONDS' first yes

dump meshdump_top all mesh/stl ${dump_freq} post/mesh_top*.stl #mesh_top
dump_modify meshdump_top pad 10                              # pad the timesteps with zeros

dump meshdump_bot all mesh/stl ${dump_freq} post/mesh_bot*.stl mesh_bot
dump_modify meshdump_bot pad 10                              # pad the timesteps with zeros

dump meshdump_top_vtk all mesh/vtk ${dump_freq} post/get_stress*.vtk stress mesh_top
dump_modify meshdump_top_vtk pad 10                              # pad the timesteps with zeros

run ${num_timesteps}
if "v_numbonds < ${bonds_thresh}" then quit